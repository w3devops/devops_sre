# Default values for myapp-chart
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Application configuration
replicaCount: 3

image:
  repository: nginx
  pullPolicy: IfNotPresent
  tag: "1.21.0"

# Service account configuration
serviceAccount:
  create: true
  name: "myapp-sa"
  annotations: {}

# RBAC configuration
rbac:
  create: true
  serviceAccountName: "myapp-sa"

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 2000

# Security context for containers
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
      - ALL

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 8080
  annotations: {}

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: myapp.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: myapp-tls
      hosts:
        - myapp.example.com

# Resource limits and requests
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

# Horizontal Pod Autoscaler
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# ConfigMap configuration
configmap:
  enabled: true
  data:
    APP_ENV: "production"
    DATABASE_URL: "postgresql://db:5432/myapp"
    REDIS_URL: "redis://redis:6379"

# Secret configuration
secret:
  enabled: true
  data:
    DATABASE_PASSWORD: "cGFzc3dvcmQ="  # base64 encoded "password"
    JWT_SECRET: "c2VjcmV0"  # base64 encoded "secret"

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    namespace: monitoring
    interval: 30s
    scrapeTimeout: 10s
  prometheusRule:
    enabled: true
    namespace: monitoring

# Network policies
networkPolicy:
  enabled: true
  ingress:
    enabled: true
    from:
      - podSelector:
          matchLabels:
            app: ingress-nginx
      - namespaceSelector:
          matchLabels:
            name: monitoring

# Node selector, tolerations, and affinity
nodeSelector: {}
tolerations: []
affinity: {}

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Liveness and readiness probes
livenessProbe:
  enabled: true
  httpGet:
    path: /health
    port: 8080
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  enabled: true
  httpGet:
    path: /ready
    port: 8080
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Environment variables
env: []

# Volume mounts
volumes: []
volumeMounts: []

# Init containers
initContainers: []

# Sidecar containers
sidecars: []